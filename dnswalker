#! /usr/bin/perl

use v5.10;
use strict;
use Net::DNS;
use POSIX;
use Time::HiRes qw(time);
use DBI;


use Data::Dumper;
$Data::Dumper::Sortkeys = $Data::Dumper::Indent = 1;

my %resolvers;
my %state;
my($dbh,$insert_rr,$insert_err);

my $have_ipv6 = 0;


$| = 1;

for my $zone (@ARGV) {
    $zone =~ s/[.]*$//;
    create_db_and_log($zone);
    load_root_ns();
    check_zone("$zone.");
}

log_msg("All done");

# print Data::Dumper->Dump( [ \%state ], [qw(state)] );

exit;

# --------------------------------------------------------------------------

sub create_db_and_log {
    my($zone) = @_;
    my $n = 1;
    my $dbname;
    do {
	$dbname = sprintf("dnswalker-%s-%s-%03d",
			  $zone,
			  strftime("%Y%m%d-%H%M%S", localtime),
			  $n++,
			 );
    } while (-f $dbname);

    open LOG, ">>", "$dbname.log";
    LOG->autoflush;

    $dbh = DBI->connect("dbi:SQLite:dbname=$dbname.sqlite", "", "",
			{ sqlite_unicode => 1,
			  PrintError => 0,
			  RaiseError => 1,
			}
		       );

    $dbh->do(qq{
CREATE TABLE IF NOT EXISTS dns_cache (
    name	VARCHAR		NOT NULL,
    ttl		NUMBER		NULL,
    class	VARCHAR		NOT NULL DEFAULT 'IN',
    type	VARCHAR		NOT NULL,
    data	VARCHAR		NOT NULL,
    source	VARCHAR		NOT NULL,

    updated     DATETIME	DEFAULT CURRENT_TIMESTAMP,

    primary key (name, class, type, data, source)
);});

    $dbh->do(qq{
CREATE TABLE IF NOT EXISTS dns_error (
    name	VARCHAR		NOT NULL,
    class	VARCHAR		NOT NULL DEFAULT 'IN',
    type	VARCHAR		NOT NULL,
    error	VARCHAR		NOT NULL,
    source	VARCHAR		NOT NULL,
    updated     DATETIME	DEFAULT CURRENT_TIMESTAMP,

    primary key (name, class, type, source)
);});

    $insert_rr = $dbh->prepare(qq{
INSERT OR REPLACE INTO
dns_cache (name, ttl, class, type, data, source)
VALUES    (?,    ?,   ?,     ?,    ?,    ?);
});

    $insert_err = $dbh->prepare(qq{
INSERT OR REPLACE INTO
dns_error (name, class, type, error, source)
VALUES    (?,    ?,     ?,    ?,     ?);
});

}

sub load_root_ns {
    my $local_resolver = Net::DNS::Resolver->new();
    store_query(LOCAL => $local_resolver, '.', 'NS');

    for my $ns (get_ns_for_zone('.')) {
	store_query(LOCAL => $local_resolver, $ns, $_) for qw(A AAAA);
    }

    $state{WALK}{'.'}{checked} = 1;
}

sub store_query {
    my($source, $resolver, $name, $search_type, $search_class) = @_;
    $search_class ||= 'IN';

    if ($state{LOOKUP}{$source}{$name}{$search_class}{$search_type}++) {
	# already done this query
	next;
    }
    if ($state{ERROR}{$source}{_}) {
	log_msg("Skipping query for %s for %s from blacklisted %s",
		$search_type,
		$name,
		$source);
	next;
    }

    log_msg("Looking up %s for %s from %s",
	    $search_type,
	    $name,
	    $source);

    my $resp = $resolver->send($name, $search_type, $search_class);
    if ($resp) {
	my $rcode = $resp->header->rcode;
	unless ($rcode eq "NOERROR") {
	    log_msg("  Resp: %s", $rcode);
	    $insert_err->execute($name,
				 $search_class, $search_type,
				 $rcode, $source);
	}

	#log_msg("  Got responses from %s", $source);
	for my $rr ($resp->answer, $resp->authority, $resp->additional) {

	    my($owner,$class,$type,$rdata) =
	      ($rr->owner, $rr->class, $rr->type, $rr->rdstring);
	    my $zone = $owner;
	    $zone =~ s/^[^.]+[.]//;
	    for ($owner, $zone) {
		s/\.*$/./;
	    }

	    log_msg("  Got: %s %s %s %s", $owner, $class, $type, $rdata);

	    $insert_rr->execute($owner, $rr->ttl, $class, $type, $rdata, $source);
	    $state{LOOKUP}{$source}{$owner}{$class}{$type}++;
	}
    }
    else {
	my $error = $resolver->errorstring;
	$insert_err->execute($name, undef, $search_type, $error, $source);
	$state{ERROR}{$source}{$name}{$search_type} = $error;
	if ($error =~ /timed out/) {
	    # blacklist this resolver, since we got a timeout
	    $state{ERROR}{$source}{_}++;
	}
	log_msg("Error: %s", $error);
    }
}

sub store_axfr {
    my($source, $resolver, $name) = @_;

    if ($state{LOOKUP}{$source}{$name}{undef}{AXRF}++) {
	next;
    }
    # $state{ERROR}{$source}{$name}{AXFR}

    log_msg("Trying AXFR for %s from %s",
	    $name,
	    $source);

    my @zone = $resolver->axfr($name);
    if (@zone) {
	#log_msg("  Got responses from %s", $source);
	for my $rr (@zone) {

	    my($owner,$class,$type,$rdata) =
	      ($rr->owner, $rr->class, $rr->type, $rr->rdstring);
	    my $zone = $owner;
	    $zone =~ s/^[^.]+[.]//;
	    for ($owner, $zone) {
		s/\.*$/./;
	    }

	    log_msg("  Got: %s %s %s %s", $owner, $class, $type, $rdata);

	    $insert_rr->execute($owner, $rr->ttl, $class, $type,
				$rdata, $source);
	    $state{LOOKUP}{$source}{$owner}{$class}{$type}++;
	}
    }
    else {
	my $error = $resolver->errorstring;
	$insert_err->execute($name, undef, 'AXFR', $error, $source);
	$state{ERROR}{$source}{$name}{AXFR} = $error;
	log_msg("Error: %s", $error);
    }
}

sub check_zone {
    my($zone) = @_;

    # find ns for the zone (walk from the top)
    walk_ns_path($zone, 1);

    my %zones = ( $zone => 1);
    my %seen;
    my $repeat = 1;
    # walk path for all ns of zone until we don't find any more
    while ($repeat) {
	$repeat = 0;
	log_msg("REPEATING: %s", join ", ", sort keys %zones);
	my %ns;

	# find nses for all zones the nses are in
	for my $z (sort keys %zones) {
	    for my $ns (get_ns_for_zone($z)) {
		$ns{$ns}++;
	    }
	}

	for my $ns (sort keys %ns) {
	    next if $seen{$ns}++;
	    log_msg("Unseen: %s", $ns);
	    $repeat = 1;
	    my @path = split_zone($ns);
	    pop @path;
	    my $z = $path[-1];
	    $zones{$z}++;
	    walk_ns_path($z, 1);

	    my $resolvers = get_resolvers($z);
	    next unless $resolvers;

	    for my $source (sort keys %$resolvers) {
		my $resolver = $resolvers->{$source};
		store_query($source => $resolver, $ns, $_) for qw(A AAAA);
	    }

	}
    }
    log_msg("REPEATING DONE");

    for my $z (sort keys %zones) {
	my $resolvers = get_resolvers($z);
	next unless $resolvers;

	for my $source (sort keys %$resolvers) {
	    my $resolver = $resolvers->{$source};
	    store_query($source => $resolver, $z, $_) for qw(NS SOA A AAAA);
	}
    }

    my $resolvers = get_resolvers($zone);
    for my $source (sort keys %$resolvers) {
	my $resolver = $resolvers->{$source};
	store_query($source => $resolver, $zone, 'ANY');
	store_query($source => $resolver, "version.bind.", "TXT", "CH");
	store_axfr($source => $resolver, $zone);
    }

}

sub walk_ns_path {
    my($zone, $main) = @_;
    log_msg("Walking %s", $zone);
    my(@path) = split_zone($zone);

    my $last_name = shift @path; # "." should already have been loaded
    for my $name (@path) {
	my $parent = $last_name;
	$last_name = $name;

	if ($state{WALK}{$name}{checked}) {
	    log_msg("Already checked %s", $name);
	    next;
	}

	if ($state{WALK}{$name}{checking}++) {
	    log_msg("Currently checking %s", $name);
	    next;
	}

	# look up all NS for zone via parent
	log_msg("looking up NS for %s asking in %s", $name, $parent);

	my $resolvers = get_resolvers($parent);
	unless ($resolvers) {
	    warn "No resolvers for zone: $parent\n";
	    last;
	}

	for my $source (sort keys %$resolvers) {
	    my $resolver = $resolvers->{$source};

	    #$resolver->print();
	    store_query($source => $resolver, $name, 'NS');
	}

	if ($main) {
	    # walk the path for all of the nameservers found
	    my @ns = get_ns_for_zone($name);

	    for my $ns (@ns) {
		my(@ns_path) = split_zone($ns);
		pop @ns_path;
		walk_ns_path($ns_path[-1]);
	    }
	}

	$state{WALK}{$name}{checked} = 'done';
	$parent = $name;
    }
}

sub get_ns_for_zone {
    my($name) = @_;
    my(@ns);
    state $get_ns_for_zone ||= $dbh->prepare(qq{
SELECT DISTINCT ns.data
FROM dns_cache ns
WHERE ns.type = 'NS'
  AND ns.name = ?
order by 1
});
    $get_ns_for_zone->execute($name);
    while (my $row = $get_ns_for_zone->fetchrow_hashref) {
	push @ns, $row->{data};
    }
    return @ns;
}

sub split_zone {
    my($zone) = @_;
    my @path;
    $zone =~ s/\.*$/./;
    while ($zone =~ s/([^.]+\.)$//) {
	push @path, $1.$path[-1];
    }
    unshift @path, '.';
    return @path;
}

sub log_msg {
    my($fmt, @args) = @_;
    my $time = time;
    my $str = sprintf("%s.%09d: $fmt\n",
		      strftime("%F %T", localtime $time),
		      ($time-int($time))*1000000000,
		      @args);
    print $str;
    print LOG $str;
}

sub get_resolvers {
    my($zone) = @_;

    state $get_ns_addr ||= $dbh->prepare(qq{
SELECT DISTINCT ns.data as host, ip.type, ip.data as ip
FROM dns_cache ns
LEFT JOIN (select * from dns_cache where type in ('A','AAAA')) ip
ON ns.data = ip.name
WHERE ns.type = 'NS'
  AND ns.name = ?
order by 1
});

    $get_ns_addr->execute($zone);
    while (my $row = $get_ns_addr->fetchrow_hashref) {
	next if !$have_ipv6 && $row->{type} eq 'AAAA';
	my $ns = $row->{host};
	my $addr = $row->{ip};
	next unless $addr;
	my $src = "$ns/$addr";

	$resolvers{$zone}{$src} ||= Net::DNS::Resolver
	  ->new( nameservers => [ $addr ],
		 recurse => 0,
		 # debug => 1,
		 # tcp_timeout => 15, # should be more than enough
		 # udp_timeout => 15,
	       );
    }

    return %resolvers{$zone};
}
